import Cocoa

/// View to see the differences between unoptimised and optimised IR
public class OptimisationExplorer: NSSplitView {

    private let irView = NSSplitView()

    /// - Parameters:
    ///   - optimiser: The optimiser used to optimise the IR generated by the given Swift file
    ///   - sourceFile: The Swift file to compile with and without optimisations enabled
    public init(withOptimiser optimiser: Optimiser, forSourceFile sourceFile: SwiftFile) {
        super.init(frame: CGRect(x: 0, y: 0, width: 500, height: 600))

        self.wantsLayer = true
        self.layer!.backgroundColor = NSColor(white: 247/255, alpha: 1).cgColor

        // Set up source header
        let sourceCodeHeader = NSTextField(labelWithString: "Source Code")
        sourceCodeHeader.font = NSFont.systemFont(ofSize: 33, weight: NSFont.Weight.semibold)
        addArrangedSubview(sourceCodeHeader)

        // Set up source view
        let sourceView = NSTextField()
        sourceView.isEditable = false
        sourceView.backgroundColor = NSColor.white
        sourceView.drawsBackground = true
        sourceView.isBordered = false
        sourceView.attributedStringValue = sourceFile.highlightedString
        sourceView.translatesAutoresizingMaskIntoConstraints = false

        let sourceScrollView = NSScrollView()
        sourceScrollView.documentView = sourceView
        sourceScrollView.translatesAutoresizingMaskIntoConstraints = false
        sourceScrollView.hasVerticalScroller = true
        sourceScrollView.addConstraint(NSLayoutConstraint(item: sourceView, attribute: .width, relatedBy: .equal, toItem: sourceScrollView, attribute: .width, multiplier: 1, constant: 0))


        let sourceWrapper = NSStackView()
        sourceWrapper.orientation = .vertical
        sourceWrapper.translatesAutoresizingMaskIntoConstraints = false
        sourceWrapper.addFullWidthView(sourceCodeHeader)
        sourceWrapper.addFullWidthView(sourceScrollView)

        self.addArrangedSubview(sourceWrapper)

        // Compile the program
        let ast: ASTRoot
        do {
            ast = try Parser.parse(sourceFile: sourceFile)
            try Typechecker.typecheck(node: ast)
        } catch {
            let error = error as! CompilationError
            let errorView = NSTextField()
            errorView.translatesAutoresizingMaskIntoConstraints = false
            errorView.stringValue = "Compilation error:\n\(error)"
            errorView.isBordered = false

            self.addArrangedSubview(errorView)
            return
        }
        let unoptimisedIR = IRGen.generateIR(forAST: ast)
        let optimisedIR = optimiser.optimise(ir: unoptimisedIR)


        func createIRRegion(forIR ir: IR, withTitle title: String) -> NSView {
            let irView = NSTextField()
            irView.backgroundColor = NSColor.white
            irView.drawsBackground = true
            irView.isBordered = false
            irView.attributedStringValue = ir.debugDescription.monospacedString
            irView.isEditable = false
            irView.translatesAutoresizingMaskIntoConstraints = false

            let headerView = NSTextField(labelWithString: title)
            headerView.font = NSFont.systemFont(ofSize: 33, weight: NSFont.Weight.semibold)
            headerView.translatesAutoresizingMaskIntoConstraints = false

            let irScrollView = NSScrollView()
            irScrollView.documentView = irView
            irScrollView.translatesAutoresizingMaskIntoConstraints = false
            irScrollView.addConstraint(NSLayoutConstraint(item: irView, attribute: .width, relatedBy: .greaterThanOrEqual, toItem: irScrollView, attribute: .width, multiplier: 1, constant: 0))

            let stackView = NSStackView()
            stackView.orientation = .vertical
            stackView.addFullWidthView(headerView)
            stackView.addFullWidthView(irScrollView)
            stackView.translatesAutoresizingMaskIntoConstraints = false

            return stackView
        }

        let unoptimisedIRView = createIRRegion(forIR: unoptimisedIR, withTitle: "Unoptimised")
        let optimisedIRView = createIRRegion(forIR: optimisedIR, withTitle: "Optimised")

        irView.isVertical = true
        irView.dividerStyle = .thick
        irView.translatesAutoresizingMaskIntoConstraints = false
        irView.addArrangedSubview(unoptimisedIRView)
        irView.addArrangedSubview(optimisedIRView)

        self.addArrangedSubview(irView)
    }
    
    required public init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    public override func viewDidMoveToWindow() {
        super.viewDidMoveToWindow()
        self.setPosition(self.frame.size.height * 0.3, ofDividerAt: 0)
        irView.setPosition(irView.frame.size.width * 0.5, ofDividerAt: 0)
    }
}
